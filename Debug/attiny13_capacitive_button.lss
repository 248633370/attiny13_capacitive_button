
attiny13_capacitive_button.elf:     формат файла elf32-avr

Разделы:
Инд Имя           Размер    VMA       LMA       Файл      Вырав
  0 .text         00000114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000114  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001a8  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000f3  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000095  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000014b  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000074  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004af2  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000b1  00000000  00000000  0000572a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000057db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000016fa  00000000  00000000  000057fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a3 36       	cpi	r26, 0x63	; 99
  28:	b1 07       	cpc	r27, r17
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	6b d0       	rcall	.+214    	; 0x104 <main>
  2e:	70 c0       	rjmp	.+224    	; 0x110 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <pwm_setup>:
bool atx_status = false;
bool full_light = false;
bool half_light = false;

void pwm_setup(void)
{
  32:	cf 93       	push	r28
  34:	df 93       	push	r29
  36:	cd b7       	in	r28, 0x3d	; 61
  38:	dd 27       	eor	r29, r29
	// set PB0 and PB1 in output mode
	DDRB |= (1<<PB1)|(1<<PB0);
  3a:	87 e3       	ldi	r24, 0x37	; 55
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	27 e3       	ldi	r18, 0x37	; 55
  40:	30 e0       	ldi	r19, 0x00	; 0
  42:	f9 01       	movw	r30, r18
  44:	20 81       	ld	r18, Z
  46:	23 60       	ori	r18, 0x03	; 3
  48:	fc 01       	movw	r30, r24
  4a:	20 83       	st	Z, r18

	// PWM out on PB0
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
  4c:	8f e4       	ldi	r24, 0x4F	; 79
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	2f e4       	ldi	r18, 0x4F	; 79
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	f9 01       	movw	r30, r18
  56:	20 81       	ld	r18, Z
  58:	23 60       	ori	r18, 0x03	; 3
  5a:	fc 01       	movw	r30, r24
  5c:	20 83       	st	Z, r18
	TCCR0A |= (1<<COM0A1);
  5e:	8f e4       	ldi	r24, 0x4F	; 79
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	2f e4       	ldi	r18, 0x4F	; 79
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	f9 01       	movw	r30, r18
  68:	20 81       	ld	r18, Z
  6a:	20 68       	ori	r18, 0x80	; 128
  6c:	fc 01       	movw	r30, r24
  6e:	20 83       	st	Z, r18
	TCCR0A |= (1<<COM0B1);
  70:	8f e4       	ldi	r24, 0x4F	; 79
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	2f e4       	ldi	r18, 0x4F	; 79
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	f9 01       	movw	r30, r18
  7a:	20 81       	ld	r18, Z
  7c:	20 62       	ori	r18, 0x20	; 32
  7e:	fc 01       	movw	r30, r24
  80:	20 83       	st	Z, r18
	TCCR0B |= (1<<CS00);
  82:	83 e5       	ldi	r24, 0x53	; 83
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	23 e5       	ldi	r18, 0x53	; 83
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	f9 01       	movw	r30, r18
  8c:	20 81       	ld	r18, Z
  8e:	21 60       	ori	r18, 0x01	; 1
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18
	// COM0A1 - 1 set "Clear OC0A on Compare Match, set OC0A at TOP"
	// WGM02:0 - 111 set Fast PWM Mode with TOP in OCRA
	// CS02:0 - 001 set clock source divider /32
	OCR0B = 0x80; // Duty about 50% (128 from 255)
  94:	89 e4       	ldi	r24, 0x49	; 73
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	20 e8       	ldi	r18, 0x80	; 128
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
}
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <pson_switch>:
	// ADIE - 1 enable ADC interrupt
	// ADIF - 1 enable
}
*/
void pson_switch()
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	dd 27       	eor	r29, r29
	if (atx_status)
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	88 23       	and	r24, r24
  b2:	a1 f0       	breq	.+40     	; 0xdc <pson_switch+0x38>
	{
		DDRB &= ~(1<<PB2);
  b4:	87 e3       	ldi	r24, 0x37	; 55
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	27 e3       	ldi	r18, 0x37	; 55
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	2b 7f       	andi	r18, 0xFB	; 251
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
		atx_status = false;
  c6:	10 92 60 00 	sts	0x0060, r1
		OCR0B = 0x00;
  ca:	89 e4       	ldi	r24, 0x49	; 73
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	10 82       	st	Z, r1
		full_light = false;
  d2:	10 92 61 00 	sts	0x0061, r1
		half_light = false;
  d6:	10 92 62 00 	sts	0x0062, r1
  da:	11 c0       	rjmp	.+34     	; 0xfe <pson_switch+0x5a>
	}
	else
	{
		DDRB |= (1<<PB2);	// enable PB2 (ATX PS_ON )
  dc:	87 e3       	ldi	r24, 0x37	; 55
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	27 e3       	ldi	r18, 0x37	; 55
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	24 60       	ori	r18, 0x04	; 4
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
		OCR0B = 0x80;		// enable half duty PWM on PB1 (+12V power key)
  ee:	89 e4       	ldi	r24, 0x49	; 73
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	20 e8       	ldi	r18, 0x80	; 128
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
		half_light = true;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 62 00 	sts	0x0062, r24
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:


int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	dd 27       	eor	r29, r29
	pwm_setup();
 10c:	92 df       	rcall	.-220    	; 0x32 <pwm_setup>

	//main loop
	while (1)
	{

	}
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0xa>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
